services:
  # Backend API Service
  backend:
    build:
      context: ../
      dockerfile: apps/backend/Dockerfile
      args:
        PYPI_INDEX_URL: ${PYPI_INDEX_URL:-https://pypi.org/simple}
        PYPI_TRUSTED_HOST: ${PYPI_TRUSTED_HOST:-}
        APT_MIRROR: ${APT_MIRROR:-}
        APT_SECURITY_MIRROR: ${APT_SECURITY_MIRROR:-}
    container_name: brain_net_backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-brain_net}
      - ELASTICSEARCH_URL=http://elasticsearch:${ELASTICSEARCH_PORT:-9200}
      - NEO4J_URI=bolt://neo4j:${NEO4J_BOLT_PORT:-7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - MINIO_ENDPOINT=minio:${MINIO_API_PORT:-9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - REDIS_URL=redis://redis:${REDIS_PORT:-6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - BACKEND_DEBUG=${BACKEND_DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # OpenTelemetry Configuration
      - OTEL_ENABLED=${OTEL_ENABLED:-true}
      - OTEL_REQUIRED=${OTEL_REQUIRED:-false}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=brain_net_backend
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=${ENVIRONMENT:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - elasticsearch
      - neo4j
      - minio
      - redis
    volumes:
      - ../apps/backend:/app
      - ../apps/shared:/app/apps/shared
      - backend_data:/app/data
    networks:
      - brain_net_network
    restart: unless-stopped

  # LLM Service
  llm:
    build:
      context: ../
      dockerfile: apps/llm/Dockerfile
      args:
        PYPI_INDEX_URL: ${PYPI_INDEX_URL:-https://pypi.org/simple}
        PYPI_TRUSTED_HOST: ${PYPI_TRUSTED_HOST:-}
        APT_MIRROR: ${APT_MIRROR:-}
        APT_SECURITY_MIRROR: ${APT_SECURITY_MIRROR:-}
    container_name: brain_net_llm
    ports:
      - "${LLM_PORT:-8001}:8001"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-brain_net}
      - ELASTICSEARCH_URL=http://elasticsearch:${ELASTICSEARCH_PORT:-9200}
      - NEO4J_URI=bolt://neo4j:${NEO4J_BOLT_PORT:-7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - MINIO_ENDPOINT=minio:${MINIO_API_PORT:-9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - REDIS_URL=redis://redis:${REDIS_PORT:-6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LLM_DEBUG=${LLM_DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # OpenTelemetry Configuration
      - OTEL_ENABLED=${OTEL_ENABLED:-true}
      - OTEL_REQUIRED=${OTEL_REQUIRED:-false}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=brain_net_llm
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=${ENVIRONMENT:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - elasticsearch
      - neo4j
      - minio
      - redis
    volumes:
      - ../apps/llm:/app
      - ../apps/shared:/app/apps/shared
    networks:
      - brain_net_network
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
      args:
        NPM_REGISTRY: ${NPM_REGISTRY:-https://registry.npmmirror.com/}
    container_name: brain_net_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000/ws}
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT:-development}
      - INTERNAL_API_URL=${INTERNAL_API_URL:-http://backend:8000}
    depends_on:
      - backend
      - llm
    volumes:
      - ../apps/frontend:/app
      - /app/node_modules
    networks:
      - brain_net_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: brain_net_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-brain_net}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - brain_net_network
    restart: unless-stopped

  # Elasticsearch for Document Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: brain_net_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - brain_net_network
    restart: unless-stopped

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: brain_net_neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password}
      - NEO4J_PLUGINS=${NEO4J_PLUGINS:-["apoc"]}
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - brain_net_network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: brain_net_minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - brain_net_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: brain_net_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - brain_net_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: brain_net_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - brain_net_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: brain_net_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - brain_net_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: brain_net_grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - brain_net_network
    restart: unless-stopped

  # Elasticsearch Log Aggregation (ELK Stack)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: brain_net_logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "${LOGSTASH_BEATS_PORT:-5044}:5044"
      - "${LOGSTASH_TCP_PORT:-5002}:5000/tcp"
      - "${LOGSTASH_UDP_PORT:-5003}:5000/udp"
      - "${LOGSTASH_HTTP_PORT:-9600}:9600"
    environment:
      LS_JAVA_OPTS: "${LS_JAVA_OPTS:--Xmx256m -Xms256m}"
    networks:
      - brain_net_network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: brain_net_kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELASTICSEARCH_PORT:-9200}
    depends_on:
      - elasticsearch
    networks:
      - brain_net_network
    restart: unless-stopped

  # ========================================
  # OBSERVABILITY SERVICES (Optional Profile)
  # ========================================
  
  # OpenTelemetry Collector
  otel-collector:
    profiles: ["observability"]
    image: otel/opentelemetry-collector-contrib:latest
    container_name: brain_net_otel_collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./monitoring/otel-collector.yml:/etc/otel-collector-config.yml
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"          # OTLP gRPC receiver
      - "${OTEL_HTTP_PORT:-4318}:4318"          # OTLP HTTP receiver
      - "${OTEL_METRICS_PORT:-8889}:8889"       # Prometheus metrics endpoint
      - "${OTEL_ZPAGES_PORT:-55679}:55679"      # zPages endpoint
      - "${OTEL_HEALTH_PORT:-13133}:13133"      # Health check endpoint
      - "${OTEL_PPROF_PORT:-1777}:1777"         # pprof endpoint
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - jaeger
    networks:
      - brain_net_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Jaeger All-in-One
  jaeger:
    profiles: ["observability"]
    image: jaegertracing/all-in-one:latest
    container_name: brain_net_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"        # Jaeger UI
    volumes:
      - jaeger_data:/tmp
    networks:
      - brain_net_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  elasticsearch_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  minio_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backend_data:
  jaeger_data:

networks:
  brain_net_network:
    driver: bridge
